# bot.py (Combined Bot and Web App)

import logging
import threading
from flask import Flask, render_template
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import config

# ==============================================================================
# 1. ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§¨‡•á‡§∏‡§ø‡§ï ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§®
# ==============================================================================

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("werkzeug").setLevel(logging.WARNING) # Flask ‡§ï‡•á ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§≤‡•â‡§ó‡•ç‡§∏ ‡§ï‡•ã ‡§∂‡§æ‡§Ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
logger = logging.getLogger(__name__)


# ==============================================================================
# 2. ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü (FLASK APP) ‡§ï‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ
# ==============================================================================

# Flask ‡§ê‡§™ ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç
# template_folder='templates' ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø Flask ‡§∏‡§π‡•Ä ‡§ú‡§ó‡§π ‡§™‡§∞ HTML ‡§´‡§æ‡§á‡§≤ ‡§¢‡•Ç‡§Ç‡§¢‡•á
app = Flask(__name__, template_folder='templates')

@app.route('/')
def index():
    """‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡•á‡§ú ‡§∞‡•á‡§Ç‡§°‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    try:
        # index.html ‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§∞‡•á‡§Ç‡§°‡§∞ (‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§) ‡§ï‡§∞‡•á‡§Ç
        return render_template('index.html', channel_link=config.STUDY_CHANNEL_LINK)
    except Exception as e:
        logger.error(f"Template rendering error: {e}")
        return "Internal Server Error: Could not render template. Please check logs.", 500

def run_flask_app():
    """Flask ‡§µ‡•á‡§¨ ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•§"""
    logger.info(f"Starting Flask web server on http://{config.VPS_IP}:{config.PORT}")
    # host='0.0.0.0' ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‡§ï‡§ø ‡§Ø‡§π ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡§≠‡•Ä ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï IP ‡§™‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã‡§ó‡§æ
    app.run(host='0.0.0.0', port=config.PORT, debug=False)


# ==============================================================================
# 3. ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ
# ==============================================================================

async def send_website_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§"""
    keyboard = [
        [InlineKeyboardButton("üåê ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç", url=config.WEBSITE_URL)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = (
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! üëã\n\n"
        "‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§™‡•ç‡§≤‡§æ‡§® ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç‡•§\n\n"
        f"‡§Ü‡§™ ‡§∏‡•Ä‡§ß‡•á ‡§á‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§≠‡•Ä ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç: {config.WEBSITE_URL}"
    )
    await update.message.reply_text(message_text, reply_markup=reply_markup)

async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§"""
    logger.info(f"Received message from {update.effective_user.first_name}")
    await send_website_link(update, context)


# ==============================================================================
# 4. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
# ==============================================================================

def main() -> None:
    """‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§î‡§∞ ‡§¨‡•â‡§ü ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    
    # --- ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§ï‡•ã ‡§è‡§ï ‡§Ö‡§≤‡§ó ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ---
    flask_thread = threading.Thread(target=run_flask_app)
    flask_thread.daemon = True  # ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§¨‡§Ç‡§¶ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§•‡•ç‡§∞‡•á‡§° ‡§≠‡•Ä ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ú‡§æ‡§è
    flask_thread.start()
    
    # --- ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ---
    application = Application.builder().token(config.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", send_website_link))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_any_message))

    logger.info("Starting Telegram bot polling...")
    application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
